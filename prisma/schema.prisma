// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = ""
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid()) @unique
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid()) @unique
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid()) @unique
  name          String
  email         String?    @unique
  emailVerified Boolean?
  password      String?

  apiKey   ApiKey[]
  apiKeyId String?
  image    String?
  accounts Account[]
  sessions Session[]
}

model ConfirmEmail {
  id        String   @id @default(cuid()) @unique
  token     String   @unique
  expires   DateTime 
  email     String
  userId    String
  createdAt DateTime @default(now())
}

model ForgotPassword {
  id        String   @id @default(cuid()) @unique
  token     String   @unique
  expires   DateTime 
  email     String
  userId    String
  createdAt DateTime @default(now())
}

model ApiKey {
  id      String  @id @default(cuid())
  key     String  @unique
  enabled Boolean @default(true)
  User    User    @relation(fields: [userId], references: [id])
  userId  String

  requests ApiRequest[]

  @@unique([userId, key, enabled])
}

model ApiRequest {
  id        String   @id @default(cuid()) @unique
  timestamp DateTime @default(now())
  method    String
  path      String
  status    Int
  duration  Int
  response  String

  usedApiKey String

  ApiKey   ApiKey @relation(fields: [apiKeyId], references: [id])
  apiKeyId String

  @@index([apiKeyId, timestamp])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}